---
import { Icon } from "astro-icon";
import ThemeSwitcher from "~/components/theme-switcher.astro";
import {
  getContentById,
  getSubcontentByParentIdAndTemplateName,
} from "~/utils/dataFetching";
import type { NavItem, SectionData } from "~/types";

export interface Props {
  id: string;
}

const { id } = Astro.props;

// Get header content
const response = await getContentById(fetch, id);
const { title, logoLight, logoDark } = response.data[0].Data;

// Fetch all navigable sections to be added on header navigation menu
const sections: { data: Array<any> } =
  await getSubcontentByParentIdAndTemplateName(
    fetch,
    import.meta.env.PUBLIC_PAGE_CONTENT_ID,
    "Section"
  );

let items = sections.data
  .map((data: SectionData) => data.Data)
  .filter((data: SectionData) => data.navigation.showInMenu);

let navItems: Array<NavItem> = items.map((data: SectionData) => ({
  title: data.navigationTitle,
  url: data.url,
}));
---

<header
  id="page-header"
  class="absolute bottom-0 z-20 flex w-full items-center justify-between border-b border-transparent px-8 py-4 text-white"
>
  <a
    class="flex items-center gap-3 hover:!text-default"
    href="#"
    data-nimvio-content-id={id}
    data-header-content-id={id}
  >
    <img
      src={logoLight.MediaUrl}
      alt="Header Logo"
      class="h-10"
      id="logo-theme-light"
    />
    <img
      src={logoDark.MediaUrl}
      alt="Header Logo"
      class="hidden h-10"
      id="logo-theme-dark"
    />
    <h1 class="sm:block" data-props-name="title">{title}</h1>
  </a>
  <div>
    <div class="flex items-center gap-6">
      <nav class="hidden sm:block">
        <ul class="flex items-center gap-6">
          {
            navItems.map(({ title, url }) => (
              <li>
                <a class="text-sm" href={url}>
                  {title}
                </a>
              </li>
            ))
          }
        </ul>
      </nav>
      <button
        id="open-nav-button"
        type="button"
        class="btn sm:hidden"
        aria-label="Navigation"
      >
        <Icon pack="mdi" name="menu" class="h-8" />
      </button>
      <ThemeSwitcher />
    </div>
    <div id="menu-modal" class="modal hidden" aria-hidden="true">
      <div class="fixed inset-0 bg-default px-8 py-4 text-default">
        <div class="space-y-4" role="dialog" aria-modal="true">
          <header class="text-right">
            <button
              id="close-nav-button"
              type="button"
              class="btn"
              aria-label="Close navigation"
            >
              <Icon pack="mdi" name="close" class="h-8" />
            </button>
          </header>
          <div class="flex justify-center">
            <img
              src={logoLight.MediaUrl}
              alt="Header Logo"
              id="logo-mobile-theme-light"
              class="h-16"
            />
            <img
              src={logoDark.MediaUrl}
              alt="Header Logo"
              class="hidden h-16"
              id="logo-mobile-theme-dark"
              data-props-name="logoDark"
            />
          </div>
          <nav>
            <ul class="flex flex-col">
              {
                navItems.map(({ title, url }) => (
                  <li>
                    <a class="block py-4 text-center text-xl" href={url}>
                      {title}
                    </a>
                  </li>
                ))
              }
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  const menuModalId = "menu-modal";

  const header = document.querySelector("#page-header") as HTMLElement;
  const page = document.documentElement;
  const menu = document.querySelector(`#${menuModalId} ul`);
  const openNavButton = document.querySelector("#open-nav-button");
  const closeNavButton = document.querySelector("#close-nav-button");

  invariant(header, "header should not be null");
  invariant(menu, "menu should not be null");
  invariant(openNavButton, "openNavButton should not be null");
  invariant(closeNavButton, "closeNavButton should not be null");

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  openNavButton.addEventListener("click", openMenu);
  closeNavButton.addEventListener("click", closeMenu);

  document.addEventListener("scroll", () => {
    const d = page.clientHeight - page.scrollTop - header.offsetHeight;
    header.classList.toggle("fixed-header", d < 0);

    if (document.querySelector(".fixed-header")) {
      const logoLight = document.querySelector(`#logo-theme-light`);
      const darkTheme = document.querySelector('[data-theme="dark"]');

      if (!logoLight?.classList.contains("hidden") && !darkTheme) {
        logoLight?.classList.add("hidden");
        document.querySelector(`#logo-theme-dark`)?.classList.remove("hidden");
      }
    } else {
      const logoDark = document.querySelector(`#logo-theme-dark`);

      if (!logoDark?.classList.contains("hidden")) {
        document.querySelector(`#logo-theme-light`)?.classList.remove("hidden");
        logoDark?.classList.add("hidden");
      }
    }
  });

  menu.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).tagName === "A") {
      closeMenu();
    }
  });
</script>

<script>
  import WebLink from "@nimvio/live-preview-sdk";
  import type { LivePreviewData, HeaderContent } from "~/types";

  const nimvioSdk = WebLink.init({
    queryParam: "preview",
    disableWeblink: false,
  });

  const contentId = document
    .querySelector("[data-header-content-id]")
    ?.getAttribute("data-header-content-id");

  nimvioSdk.livePreviewUtils.onPreviewContentChange((newData) => {
    const { id, formData }: LivePreviewData = newData;
    const { title, logoLight, logoDark }: HeaderContent = formData;

    if (id === contentId) {
      const elementTitle = document.querySelector(`[data-props-name="title"]`);
      elementTitle!.innerHTML = title;

      const elementLogoLight = document.querySelector("#logo-theme-light");
      elementLogoLight!.setAttribute("src", logoLight.MediaUrl);

      const elementLogoDark = document.querySelector("#logo-theme-dark");
      elementLogoDark!.setAttribute("src", logoDark.MediaUrl);
    }
  });
</script>

<noscript>
  <style>
    #open-nav-button {
      display: none;
    }
  </style>
</noscript>

<style>
  .fixed-header {
    @apply fixed top-0 bottom-auto;
    @apply border-default bg-default text-default;
  }
  .modal.is-open {
    @apply block;
  }
</style>
